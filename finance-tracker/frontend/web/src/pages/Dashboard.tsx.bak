import React, { useEffect } from 'react';
import { useAppDispatch, useAppSelector } from '@/redux/hooks';
import { useAuth } from '@/hooks/useAuth';
import { DashboardDateRange } from '@/components/dashboard/DashboardDateRange';
import DashboardStats from '@/components/dashboard/DashboardStats';
import ExpensePieChart from '@/components/dashboard/ExpensePieChart';
import IncomeExpenseBarChart from '@/components/dashboard/IncomeExpenseBarChart';
import BalanceTrendChart from '@/components/dashboard/BalanceTrendChart';
import TopCategoriesChart from '@/components/dashboard/TopCategoriesChart';
import DailySpendingChart from '@/components/dashboard/DailySpendingChart';
import BudgetCategoryProgress from '@/components/dashboard/BudgetCategoryProgress';
import RecentTransactions from '@/components/dashboard/RecentTransactions';
import { fetchTransactions, selectTransactions } from '@/redux/slices/transactionsSlice';
import { fetchCategories, selectCategories } from '@/redux/slices/categoriesSlice';
import { fetchBudgets, selectBudgets } from '@/redux/slices/budgetsSlice';
import { useDashboardDateRange, useDashboardCharts } from '@/utils/hooks';

const Dashboard: React.FC = () => {
	const dispatch = useAppDispatch();
	const { user } = useAuth();
	
	// Get date range from custom hook
	const { 
		selectedTimeRange,
		startDate,
		endDate,
		customStartDate,
		customEndDate,
		handleTimeRangeChange,
		handleCustomStartDateChange,
		handleCustomEndDateChange,
		applyCustomDateRange,
		formatDateForAPI
	} = useDashboardDateRange();

	// Get data from store
	const { data: transactions, loading: transactionsLoading } = useAppSelector(selectTransactions);
	const { data: categories, loading: categoriesLoading } = useAppSelector(selectCategories);
	const { data: budgets, loading: budgetsLoading } = useAppSelector(selectBudgets);

	// Fetch data
	useEffect(() => {
		if (user) {
			const filters = {
				startDate: formatDateForAPI(startDate),
				endDate: formatDateForAPI(endDate)
			};
			
			dispatch(fetchTransactions(filters));
			dispatch(fetchCategories());
			dispatch(fetchBudgets());
		}
	}, [dispatch, user, startDate, endDate, formatDateForAPI]);

	// Format amount for display
	const formatAmount = (amount: number | string): string => {
		const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
		return numAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ".");
	};

	// Get chart data from custom hook
	const {
		totalIncome,
		totalExpense,
		totalBudget,
		budgetRemaining,
		budgetPercentage,
		expensesByCategory,
		monthlyData,
		balanceData,
		dailySpending,
		topCategories,
		budgetCategories
	} = useDashboardCharts(transactions, categories, budgets, startDate, endDate);

	// Loading state
	const isLoading = transactionsLoading || categoriesLoading || budgetsLoading;

	return (
		<div className="p-6">
			<h1 className="text-3xl font-bold mb-6">Dashboard</h1>
			
			{/* Date Range Selector */}
			<DashboardDateRange
				selectedTimeRange={selectedTimeRange}
				customStartDate={customStartDate}
				customEndDate={customEndDate}
				onTimeRangeChange={handleTimeRangeChange}
				onCustomStartDateChange={handleCustomStartDateChange}
				onCustomEndDateChange={handleCustomEndDateChange}
				onApplyCustomDateRange={applyCustomDateRange}
			/>

			{isLoading ? (
				<div className="flex justify-center items-center h-96">
					<p className="text-lg text-gray-500">Caricamento dati...</p>
				</div>
			) : (
				<>
					{/* Stats Cards */}
					<DashboardStats
						totalIncome={totalIncome}
						totalExpense={totalExpense}
						totalBudget={totalBudget}
						budgetRemaining={budgetRemaining}
						budgetPercentage={budgetPercentage}
						formatAmount={formatAmount}
					/>

					{/* Charts Grid */}
					<div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
						{/* First Row */}
						<ExpensePieChart
							expensesByCategory={expensesByCategory}
							formatAmount={formatAmount}
						/>
						<IncomeExpenseBarChart
							monthlyData={monthlyData}
							formatAmount={formatAmount}
						/>
						<RecentTransactions
							transactions={transactions.slice(0, 5)}
							formatAmount={formatAmount}
						/>

						{/* Second Row */}
						<BalanceTrendChart
							balanceData={balanceData}
							formatAmount={formatAmount}
						/>
						<DailySpendingChart
							dailySpending={dailySpending}
							formatAmount={formatAmount}
						/>
						
						{/* Split last column into two */}
						<div className="flex flex-col gap-6">
							<TopCategoriesChart
								topCategories={topCategories}
								formatAmount={formatAmount}
							/>
							<BudgetCategoryProgress
								budgetCategories={budgetCategories}
								formatAmount={formatAmount}
							/>
						</div>
					</div>
				</>
			)}
		</div>
	);
};

export default Dashboard;
