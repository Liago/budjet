// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql" // For migration
  url      = env("DATABASE_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  password           String
  firstName          String
  lastName           String
  transactions       Transaction[]
  categories         Category[]
  tags               Tag[]
  recurrentPayments  RecurrentPayment[]
  savingsGoals       SavingsGoal[]     // Riferimento ai nuovi obiettivi di risparmio
  notifications      Notification[]
  notificationPreferences NotificationPreference[] // Preferenze notifiche
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model Category {
  id                 String              @id @default(uuid())
  name               String
  icon               String?
  color              String?
  isDefault          Boolean             @default(false)
  budget             Decimal?            // Budget mensile per la categoria
  user               User                @relation(fields: [userId], references: [id])
  userId             String
  transactions       Transaction[]
  recurrentPayments  RecurrentPayment[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([name, userId])
}

model Transaction {
  id                 String      @id @default(cuid())
  amount            Decimal
  description       String?
  date              DateTime
  type              TransactionType
  category          Category    @relation(fields: [categoryId], references: [id])
  categoryId        String
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  executionLog      AutomaticExecutionLog? @relation("AutomaticExecutionLogTransactions", fields: [executionLogId], references: [id])
  executionLogId    String?
  tags              Tag[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Tag {
  id            String        @id @default(uuid())
  name          String
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([name, userId])
}

model RecurrentPayment {
  id           String   @id @default(uuid())
  name         String
  amount       Decimal
  description  String?
  interval     String   // "daily", "weekly", "monthly", "yearly"
  dayOfMonth   Int?
  dayOfWeek    Int?
  startDate    DateTime
  endDate      DateTime?
  nextPaymentDate DateTime
  isActive     Boolean  @default(true)
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Modello per gli obiettivi di risparmio
model SavingsGoal {
  id            String    @id @default(uuid())
  name          String
  targetAmount  Decimal
  currentAmount Decimal   @default(0)
  deadline      DateTime?
  description   String?
  isCompleted   Boolean   @default(false)
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model AutomaticExecutionLog {
  id                 String      @id @default(cuid())
  executionDate      DateTime
  processedPayments  Int
  createdTransactions Int
  totalAmount        Decimal
  details            String
  transactions       Transaction[] @relation("AutomaticExecutionLogTransactions")
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   // 'info' | 'success' | 'warning' | 'error'
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// Modello per le preferenze di notifica
model NotificationPreference {
  id        String   @id @default(uuid())
  userId    String
  type      String   // 'BUDGET_ALERT', 'PAYMENT_REMINDER', ecc.
  enabled   Boolean  @default(true)
  channels  String   // JSON string formato: {"email": boolean, "app": boolean}
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, type])
} 